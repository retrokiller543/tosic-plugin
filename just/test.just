# =============================================================================
# Test Commands - Comprehensive Testing & Coverage
# =============================================================================

# Test aliases
alias test-a := test-all
alias test-c := test-coverage
alias test-i := test-integration
alias test-u := test-unit
alias test-d := test-doc

# Benchmark aliases  
alias bench := test-bench
alias bench-a := bench-all

# Coverage aliases
alias cov := test-coverage
alias cov-html := coverage-html
alias cov-lcov := coverage-lcov

# =============================================================================
# Core Test Commands
# =============================================================================

# üß™ Run all tests
[group('test')]
test *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Running all tests...{{NORMAL}}"
    
    cmd="cargo test --workspace"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add verbose flag if enabled
    if [ "{{verbose}}" != "0" ]; then
        cmd="$cmd --verbose"
    fi
    
    # Add jobs if specified
    if [ -n "{{jobs}}" ]; then
        cmd="$cmd --jobs {{jobs}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ All tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Some tests failed{{NORMAL}}"
        exit 1
    fi

# üß™ Run unit tests only
[group('test')]
test-unit *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Running unit tests...{{NORMAL}}"
    
    cmd="cargo test --workspace --lib"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Unit tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Unit tests failed{{NORMAL}}"
        exit 1
    fi

# üß™ Run integration tests
[group('test')]
test-integration *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Running integration tests...{{NORMAL}}"
    
    cmd="cargo test --workspace --test '*'"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Integration tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Integration tests failed{{NORMAL}}"
        exit 1
    fi

# üìö Run documentation tests
[group('test')]
test-doc *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üìö Running documentation tests...{{NORMAL}}"
    
    cmd="cargo test --workspace --doc"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Documentation tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Documentation tests failed{{NORMAL}}"
        exit 1
    fi

# üß™ Run all test types
[group('test')]
test-all:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Running comprehensive test suite...{{NORMAL}}"
    
    just test-unit
    just test-integration  
    just test-doc
    
    echo -e "{{BOLD}}{{GREEN}}‚úÖ All test types completed{{NORMAL}}"

# üß™ Test specific package
[group('test')]
test-package package *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Testing package: {{package}}...{{NORMAL}}"
    
    cmd="cargo test --package {{package}}"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Package {{package}} tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Package {{package}} tests failed{{NORMAL}}"
        exit 1
    fi

# =============================================================================
# Test Coverage
# =============================================================================

# üìä Generate test coverage
[group('test')]
[group('coverage')]
test-coverage *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üìä Generating test coverage...{{NORMAL}}"
    
    # Check if cargo-tarpaulin is installed
    if ! command -v cargo-tarpaulin &> /dev/null; then
        echo -e "{{YELLOW}}üì¶ Installing cargo-tarpaulin...{{NORMAL}}"
        cargo install cargo-tarpaulin
    fi
    
    cmd="cargo tarpaulin --workspace --out Html --out Lcov"
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Coverage report generated{{NORMAL}}"
        echo -e "{{CYAN}}üìÅ HTML report: tarpaulin-report.html{{NORMAL}}"
        echo -e "{{CYAN}}üìÅ LCOV report: lcov.info{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Coverage generation failed{{NORMAL}}"
        exit 1
    fi

# üìä Generate HTML coverage report
[group('coverage')]
coverage-html *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üìä Generating HTML coverage report...{{NORMAL}}"
    
    # Check if cargo-tarpaulin is installed
    if ! command -v cargo-tarpaulin &> /dev/null; then
        echo -e "{{YELLOW}}üì¶ Installing cargo-tarpaulin...{{NORMAL}}"
        cargo install cargo-tarpaulin
    fi
    
    cmd="cargo tarpaulin --workspace --out Html"
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ HTML coverage report generated: tarpaulin-report.html{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå HTML coverage generation failed{{NORMAL}}"
        exit 1
    fi

# üìä Generate LCOV coverage report
[group('coverage')]
coverage-lcov *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üìä Generating LCOV coverage report...{{NORMAL}}"
    
    # Check if cargo-tarpaulin is installed
    if ! command -v cargo-tarpaulin &> /dev/null; then
        echo -e "{{YELLOW}}üì¶ Installing cargo-tarpaulin...{{NORMAL}}"
        cargo install cargo-tarpaulin
    fi
    
    cmd="cargo tarpaulin --workspace --out Lcov"
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ LCOV coverage report generated: lcov.info{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå LCOV coverage generation failed{{NORMAL}}"
        exit 1
    fi

# =============================================================================
# Benchmarks
# =============================================================================

# ‚ö° Run benchmarks
[group('test')]
[group('bench')]
test-bench *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{BLUE}}‚ö° Running benchmarks...{{NORMAL}}"
    
    cmd="cargo bench --workspace"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Benchmarks completed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Benchmarks failed{{NORMAL}}"
        exit 1
    fi

# ‚ö° Run all benchmarks (comprehensive)
[group('bench')]
bench-all:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{BLUE}}‚ö° Running comprehensive benchmarks...{{NORMAL}}"
    
    # Check if criterion is available (for more detailed benchmarks)
    if cargo tree | grep -q "criterion"; then
        echo -e "{{CYAN}}Running criterion benchmarks...{{NORMAL}}"
        just test-bench --features bench
    else
        echo -e "{{CYAN}}Running standard benchmarks...{{NORMAL}}"
        just test-bench
    fi
    
    echo -e "{{BOLD}}{{GREEN}}‚úÖ All benchmarks completed{{NORMAL}}"

# ‚ö° Benchmark specific package
[group('bench')]
bench-package package *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{BLUE}}‚ö° Benchmarking package: {{package}}...{{NORMAL}}"
    
    cmd="cargo bench --package {{package}}"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Package {{package}} benchmarks completed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Package {{package}} benchmarks failed{{NORMAL}}"
        exit 1
    fi

# =============================================================================
# Advanced Testing
# =============================================================================

# üï∏Ô∏è Test WASM builds
[group('test')]
[group('wasm')]
test-wasm *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üï∏Ô∏è Testing WASM builds...{{NORMAL}}"
    
    # Check if wasm32 target is available
    if ! rustup target list --installed | grep -q "wasm32-unknown-unknown"; then
        echo -e "{{YELLOW}}üì¶ Installing wasm32-unknown-unknown target...{{NORMAL}}"
        rustup target add wasm32-unknown-unknown
    fi
    
    cmd="cargo test --workspace --target wasm32-unknown-unknown"
    
    # Add features if specified
    if [ -n "{{features}}" ]; then
        cmd="$cmd --features {{features}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ WASM tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå WASM tests failed{{NORMAL}}"
        exit 1
    fi

# üß™ Test with minimal features
[group('test')]
test-minimal *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Testing with minimal features...{{NORMAL}}"
    
    cmd="cargo test --workspace --no-default-features"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ Minimal feature tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå Minimal feature tests failed{{NORMAL}}"
        exit 1
    fi

# üß™ Test with all features
[group('test')]
test-all-features *args="":
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{GREEN}}üß™ Testing with all features...{{NORMAL}}"
    
    cmd="cargo test --workspace --all-features"
    
    # Add target if specified
    if [ -n "{{target}}" ]; then
        cmd="$cmd --target {{target}}"
    fi
    
    # Add any additional args
    if [ -n "{{args}}" ]; then
        cmd="$cmd {{args}}"
    fi
    
    echo -e "{{CYAN}}Running: $cmd{{NORMAL}}"
    eval $cmd
    
    if [ $? -eq 0 ]; then
        echo -e "{{BOLD}}{{GREEN}}‚úÖ All feature tests passed{{NORMAL}}"
    else
        echo -e "{{BOLD}}{{RED}}‚ùå All feature tests failed{{NORMAL}}"
        exit 1
    fi

# =============================================================================
# Watch Mode
# =============================================================================

# üëÄ Watch for changes and run tests
[group('test')]
test-watch:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üëÄ Watching for test changes...{{NORMAL}}"
    
    # Check if cargo-watch is available
    if ! command -v cargo-watch &> /dev/null; then
        echo -e "{{YELLOW}}üì¶ Installing cargo-watch...{{NORMAL}}"
        cargo install cargo-watch
    fi
    
    echo -e "{{CYAN}}Starting test watch mode...{{NORMAL}}"
    cargo watch -x "test --workspace --lib"

# üëÄ Watch for changes and run all tests
[group('test')]
test-watch-all:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üëÄ Watching for all test changes...{{NORMAL}}"
    
    # Check if cargo-watch is available
    if ! command -v cargo-watch &> /dev/null; then
        echo -e "{{YELLOW}}üì¶ Installing cargo-watch...{{NORMAL}}"
        cargo install cargo-watch
    fi
    
    echo -e "{{CYAN}}Starting comprehensive test watch mode...{{NORMAL}}"
    cargo watch -x "test --workspace"

# =============================================================================
# Test Utilities
# =============================================================================

# üßπ Clean test artifacts
[group('test')]
test-clean:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{YELLOW}}üßπ Cleaning test artifacts...{{NORMAL}}"
    
    # Remove coverage reports
    rm -f tarpaulin-report.html lcov.info cobertura.xml
    
    # Remove criterion benchmark data
    rm -rf target/criterion
    
    # Remove any profraw files
    find . -name "*.profraw" -delete 2>/dev/null || true
    
    echo -e "{{BOLD}}{{GREEN}}‚úÖ Test artifacts cleaned{{NORMAL}}"

# üìä Show test summary
[group('test')]
test-summary:
    #!/usr/bin/env bash
    echo -e "{{BOLD}}{{CYAN}}üìä Test Summary{{NORMAL}}"
    echo -e "{{BOLD}}{{CYAN}}============={{NORMAL}}"
    echo ""
    
    # Count test files
    echo -e "{{YELLOW}}Test Files:{{NORMAL}}"
    find . -name "*.rs" -path "*/tests/*" -o -name "lib.rs" -o -name "main.rs" | \
        xargs grep -l "#\[test\]" 2>/dev/null | wc -l | \
        xargs echo "  Unit test files:"
    
    find . -name "*.rs" -path "*/tests/*" | wc -l | \
        xargs echo "  Integration test files:"
    
    echo ""
    echo -e "{{YELLOW}}Coverage Files:{{NORMAL}}"
    [ -f "tarpaulin-report.html" ] && echo "  ‚úÖ HTML report: tarpaulin-report.html" || echo "  ‚ùå No HTML coverage report"
    [ -f "lcov.info" ] && echo "  ‚úÖ LCOV report: lcov.info" || echo "  ‚ùå No LCOV coverage report"
    
    echo ""
    echo -e "{{YELLOW}}Benchmark Data:{{NORMAL}}"
    [ -d "target/criterion" ] && echo "  ‚úÖ Criterion data available" || echo "  ‚ùå No benchmark data"